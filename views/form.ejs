<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      .container {
        width: 100%;
        padding: 1.5rem 2rem;
      }

      .bubble {
        /* border: 1px solid blue; */
        margin: 1rem auto 1rem 0;
        width: 80%;
      }

      .bubble__img,
      .bubble__video,
      .bubble__gif {
        width: 200px;
      }

      .bubble img,
      .bubble video {
        width: 100%;
      }

      .input {
        /* border: 1px solid green; */
        margin: 1rem 0 1rem auto;
        width: 80%;
      }

      .input__rate {
        appearance: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        background-color: #1a5fff;
      }

      input[type="radio"]:checked {
        background-color: #ff8e21;
      }
    </style>
  </head>
  <body>
    <div
      class="container form"
      style="background-color: <%= formThemeColor %>"
    ></div>
    <script>
      const formId = "<%= formId %>";
      const responseId = "<%= responseId %>";
      const formFlow = JSON.parse(`<%- JSON.stringify(formFlow) %>`);

      function wait(timeInMilliSecond) {
        return new Promise((resolve, _) =>
          setTimeout(() => {
            resolve("time completed");
          }, timeInMilliSecond)
        );
      }

      let isInputTakenAndSaved = false;
      function isInputCompleted() {
        return new Promise((resolve, _) => {
          const interval = setInterval(() => {
            if (isInputTakenAndSaved) {
              clearTimeout(interval);
              resolve("Success");
            }
          }, 100);
        });
      }

      function getBubbleTextHtml(textValue) {
        return `<div class="bubble bubble__text">${textValue}</div>`;
      }

      function getBubbleImageHtml(imageLink) {
        return `<div class="bubble bubble__img">
                  <img src="${imageLink}" alt="${imageLink}"/>
                </div>`;
      }

      function getBubbleVideoHtml(videoLink) {
        return `<div class="bubble bubble__video">
                  <video controls autoplay>
                    <source src="${videoLink}">
                    Your browser does not support the video tag.
                  </video>
                </div>`;
      }

      function getBubbleGIFHtml(gifLink) {
        return `<div class="bubble bubble__gif">
                  <img src="${gifLink}" alt="${gifLink}"/>
                </div>`;
      }

      async function saveUserInput(event, flowElementName) {
        event.preventDefault();
        let input;
        if (flowElementName.startsWith("Input Button")) {
          input = event.submitter.value;
        } else {
          input = new FormData(event.target).get(flowElementName);
        }

        console.debug(
          `data to save : formId ${formId}, responseId ${responseId}, flowElementName ${flowElementName}, input ${input}, `
        );

        const response = await fetch(
          "http://localhost:4000/form/saveResponse",
          {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              responseId,
              flowElementName,
              flowElementValue: input,
            }),
          }
        );

        if (!response.ok) {
          console.error(response);
          throw Error(
            `Failed to save response, status code ${response.status}`
          );
        }

        const jsonResponse = await response.json();
        console.debug(`Response recieved : ${JSON.stringify(jsonResponse)}`);

        isInputTakenAndSaved = true;
      }

      function getInputTextHtml(flowElementName) {
        return `<form id="${flowElementName}" class="input input__text" onsubmit="saveUserInput(event, '${flowElementName}');">
                  <input type="text" name="${flowElementName}" value="">
                  <input class="input-save-btn" type="submit" value="submit"/>
                </form>`;
      }

      function getInputNumberHtml(flowElementName) {
        return `<form id="${flowElementName}" class="input input__number" onsubmit="saveUserInput(event, '${flowElementName}');">
                  <input type="number" name="${flowElementName}" value="">
                  <input class="input-save-btn" type="submit" value="submit"/>
                </form>`;
      }

      function getInputEmailHtml(flowElementName) {
        return `<form id="${flowElementName}" class="input input__email" onsubmit="saveUserInput(event, '${flowElementName}');">
                  <input type="email" name="${flowElementName}" value="">
                  <input class="input-save-btn" type="submit" value="submit"/>
                </form>`;
      }

      function getInputPhoneHtml(flowElementName) {
        return `<form id="${flowElementName}" class="input input__phone" onsubmit="saveUserInput(event, '${flowElementName}');">
                  <input type="tel" name="${flowElementName}" value="">
                  <input class="input-save-btn" type="submit" value="submit"/>
                </form>`;
      }

      function getInputDateHtml(flowElementName) {
        return `<form id="${flowElementName}" class="input input__date" onsubmit="saveUserInput(event, '${flowElementName}');">
                  <input type="date" name="${flowElementName}" value="">
                  <input class="input-save-btn" type="submit" value="submit"/>
                </form>`;
      }

      function getInputRatingHtml(flowElementName) {
        return `<form id="${flowElementName}" class="input" onsubmit="saveUserInput(event,'${flowElementName}');">
                    <input class="input__rate" type="radio" name="${flowElementName}" value="1" placeholder="1">1</input>
                    <input class="input__rate" type="radio" name="${flowElementName}" value="2">2</input>
                    <input class="input__rate" type="radio" name="${flowElementName}" value="3">3</input>
                    <input class="input__rate" type="radio" name="${flowElementName}" value="4">4</input>
                    <input class="input__rate" type="radio" name="${flowElementName}" value="5">5</input>
                    <input type="submit" value="submit"/>
                  </form>`;
      }

      function getInputButtonHtml(flowElementName, flowElementValue) {
        return `<form id="${flowElementName}" class="input" onsubmit="saveUserInput(event,'${flowElementName}');">
                  <input class="input__btn" type="submit" value="${flowElementValue}"/>
                </form>`;
      }

      function getInputButtonHtml(flowElementName, flowElementValue) {
        return `<form class=input onsubmit="saveUserInput(event, '${flowElementName}');">
                  <input class="input__btn" type="submit" value="${flowElementValue}"/>
                </form>`;
      }

      function getBubbleHtml(flowElement) {
        switch (flowElement.type) {
          case "bubbleText":
            return getBubbleTextHtml(flowElement.value);
          case "bubbleImage":
            return getBubbleImageHtml(flowElement.value);
          case "bubbleVideo":
            return getBubbleVideoHtml(flowElement.value);
          case "bubbleGIF":
            return getBubbleGIFHtml(flowElement.value);
          default:
            return "";
        }
      }

      function getInputHtml(flowElement) {
        switch (flowElement.type) {
          case "inputText":
            return getInputTextHtml(flowElement.name);
          case "inputNumber":
            return getInputNumberHtml(flowElement.name);
          case "inputEmail":
            return getInputEmailHtml(flowElement.name);
          case "inputPhone":
            return getInputPhoneHtml(flowElement.name);
          case "inputDate":
            return getInputDateHtml(flowElement.name);
          case "inputRate":
            return getInputRatingHtml(flowElement.name);
          case "inputButton":
            return getInputButtonHtml(flowElement.name, flowElement.value);
          default:
            return "";
        }
      }

      const form = document.querySelector(".form");
      async function main() {
        for (let flowElement of formFlow) {
          console.debug(
            `next flow element: type ${flowElement.type}, name${flowElement.name}`
          );

          const type = flowElement.type;
          if (type.startsWith("bubble")) {
            form.insertAdjacentHTML("beforeend", getBubbleHtml(flowElement));
            await wait(1000);
          } else {
            form.insertAdjacentHTML("beforeend", getInputHtml(flowElement));
            isInputTakenAndSaved = false;
            await isInputCompleted();
            await wait(1000);
          }
        }
      }

      main();
    </script>
  </body>
</html>
